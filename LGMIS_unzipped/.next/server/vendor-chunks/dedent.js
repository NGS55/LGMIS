"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/dedent";
exports.ids = ["vendor-chunks/dedent"];
exports.modules = {

/***/ "(rsc)/./node_modules/dedent/dist/dedent.js":
/*!********************************************!*\
  !*** ./node_modules/dedent/dist/dedent.js ***!
  \********************************************/
/***/ ((module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\nconst dedent = createDedent({});\nvar _default = exports[\"default\"] = dedent;\nfunction createDedent(options) {\n  dedent.withOptions = newOptions => createDedent({\n    ...options,\n    ...newOptions\n  });\n  return dedent;\n  function dedent(strings, ...values) {\n    const raw = typeof strings === \"string\" ? [strings] : strings.raw;\n    const {\n      alignValues = false,\n      escapeSpecialCharacters = Array.isArray(strings),\n      trimWhitespace = true\n    } = options;\n\n    // first, perform interpolation\n    let result = \"\";\n    for (let i = 0; i < raw.length; i++) {\n      let next = raw[i];\n      if (escapeSpecialCharacters) {\n        // handle escaped newlines, backticks, and interpolation characters\n        next = next.replace(/\\\\\\n[ \\t]*/g, \"\").replace(/\\\\`/g, \"`\").replace(/\\\\\\$/g, \"$\").replace(/\\\\\\{/g, \"{\");\n      }\n      result += next;\n      if (i < values.length) {\n        const value = alignValues ? alignValue(values[i], result) : values[i];\n\n        // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n        result += value;\n      }\n    }\n\n    // now strip indentation\n    const lines = result.split(\"\\n\");\n    let mindent = null;\n    for (const l of lines) {\n      const m = l.match(/^(\\s+)\\S+/);\n      if (m) {\n        const indent = m[1].length;\n        if (!mindent) {\n          // this is the first indented line\n          mindent = indent;\n        } else {\n          mindent = Math.min(mindent, indent);\n        }\n      }\n    }\n    if (mindent !== null) {\n      const m = mindent; // appease TypeScript\n      result = lines\n      // https://github.com/typescript-eslint/typescript-eslint/issues/7140\n      // eslint-disable-next-line @typescript-eslint/prefer-string-starts-ends-with\n      .map(l => l[0] === \" \" || l[0] === \"\\t\" ? l.slice(m) : l).join(\"\\n\");\n    }\n\n    // dedent eats leading and trailing whitespace too\n    if (trimWhitespace) {\n      result = result.trim();\n    }\n\n    // handle escaped newlines at the end to ensure they don't get stripped too\n    if (escapeSpecialCharacters) {\n      result = result.replace(/\\\\n/g, \"\\n\");\n    }\n    return result;\n  }\n}\n\n/**\n * Adjusts the indentation of a multi-line interpolated value to match the current line.\n */\nfunction alignValue(value, precedingText) {\n  if (typeof value !== \"string\" || !value.includes(\"\\n\")) {\n    return value;\n  }\n  const currentLine = precedingText.slice(precedingText.lastIndexOf(\"\\n\") + 1);\n  const indentMatch = currentLine.match(/^(\\s+)/);\n  if (indentMatch) {\n    const indent = indentMatch[1];\n    return value.replace(/\\n/g, `\\n${indent}`);\n  }\n  return value;\n}\nmodule.exports = exports.default;\nmodule.exports[\"default\"] = exports.default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZGVkZW50L2Rpc3QvZGVkZW50LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUViLDhDQUE2QztBQUM3QztBQUNBLENBQUMsRUFBQztBQUNGLGtCQUFlO0FBQ2YsOEJBQThCO0FBQzlCLGVBQWUsa0JBQWU7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNOztBQUVOO0FBQ0E7QUFDQSxvQkFBb0IsZ0JBQWdCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBLHVHQUF1RyxNQUFNO0FBQzdHO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLE9BQU87QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBc0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LW11aS10eXBlb3JtLXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZGVkZW50L2Rpc3QvZGVkZW50LmpzP2U3M2QiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5jb25zdCBkZWRlbnQgPSBjcmVhdGVEZWRlbnQoe30pO1xudmFyIF9kZWZhdWx0ID0gZXhwb3J0cy5kZWZhdWx0ID0gZGVkZW50O1xuZnVuY3Rpb24gY3JlYXRlRGVkZW50KG9wdGlvbnMpIHtcbiAgZGVkZW50LndpdGhPcHRpb25zID0gbmV3T3B0aW9ucyA9PiBjcmVhdGVEZWRlbnQoe1xuICAgIC4uLm9wdGlvbnMsXG4gICAgLi4ubmV3T3B0aW9uc1xuICB9KTtcbiAgcmV0dXJuIGRlZGVudDtcbiAgZnVuY3Rpb24gZGVkZW50KHN0cmluZ3MsIC4uLnZhbHVlcykge1xuICAgIGNvbnN0IHJhdyA9IHR5cGVvZiBzdHJpbmdzID09PSBcInN0cmluZ1wiID8gW3N0cmluZ3NdIDogc3RyaW5ncy5yYXc7XG4gICAgY29uc3Qge1xuICAgICAgYWxpZ25WYWx1ZXMgPSBmYWxzZSxcbiAgICAgIGVzY2FwZVNwZWNpYWxDaGFyYWN0ZXJzID0gQXJyYXkuaXNBcnJheShzdHJpbmdzKSxcbiAgICAgIHRyaW1XaGl0ZXNwYWNlID0gdHJ1ZVxuICAgIH0gPSBvcHRpb25zO1xuXG4gICAgLy8gZmlyc3QsIHBlcmZvcm0gaW50ZXJwb2xhdGlvblxuICAgIGxldCByZXN1bHQgPSBcIlwiO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmF3Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgbmV4dCA9IHJhd1tpXTtcbiAgICAgIGlmIChlc2NhcGVTcGVjaWFsQ2hhcmFjdGVycykge1xuICAgICAgICAvLyBoYW5kbGUgZXNjYXBlZCBuZXdsaW5lcywgYmFja3RpY2tzLCBhbmQgaW50ZXJwb2xhdGlvbiBjaGFyYWN0ZXJzXG4gICAgICAgIG5leHQgPSBuZXh0LnJlcGxhY2UoL1xcXFxcXG5bIFxcdF0qL2csIFwiXCIpLnJlcGxhY2UoL1xcXFxgL2csIFwiYFwiKS5yZXBsYWNlKC9cXFxcXFwkL2csIFwiJFwiKS5yZXBsYWNlKC9cXFxcXFx7L2csIFwie1wiKTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCArPSBuZXh0O1xuICAgICAgaWYgKGkgPCB2YWx1ZXMubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gYWxpZ25WYWx1ZXMgPyBhbGlnblZhbHVlKHZhbHVlc1tpXSwgcmVzdWx0KSA6IHZhbHVlc1tpXTtcblxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3Jlc3RyaWN0LXBsdXMtb3BlcmFuZHNcbiAgICAgICAgcmVzdWx0ICs9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIG5vdyBzdHJpcCBpbmRlbnRhdGlvblxuICAgIGNvbnN0IGxpbmVzID0gcmVzdWx0LnNwbGl0KFwiXFxuXCIpO1xuICAgIGxldCBtaW5kZW50ID0gbnVsbDtcbiAgICBmb3IgKGNvbnN0IGwgb2YgbGluZXMpIHtcbiAgICAgIGNvbnN0IG0gPSBsLm1hdGNoKC9eKFxccyspXFxTKy8pO1xuICAgICAgaWYgKG0pIHtcbiAgICAgICAgY29uc3QgaW5kZW50ID0gbVsxXS5sZW5ndGg7XG4gICAgICAgIGlmICghbWluZGVudCkge1xuICAgICAgICAgIC8vIHRoaXMgaXMgdGhlIGZpcnN0IGluZGVudGVkIGxpbmVcbiAgICAgICAgICBtaW5kZW50ID0gaW5kZW50O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1pbmRlbnQgPSBNYXRoLm1pbihtaW5kZW50LCBpbmRlbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChtaW5kZW50ICE9PSBudWxsKSB7XG4gICAgICBjb25zdCBtID0gbWluZGVudDsgLy8gYXBwZWFzZSBUeXBlU2NyaXB0XG4gICAgICByZXN1bHQgPSBsaW5lc1xuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3R5cGVzY3JpcHQtZXNsaW50L3R5cGVzY3JpcHQtZXNsaW50L2lzc3Vlcy83MTQwXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3ByZWZlci1zdHJpbmctc3RhcnRzLWVuZHMtd2l0aFxuICAgICAgLm1hcChsID0+IGxbMF0gPT09IFwiIFwiIHx8IGxbMF0gPT09IFwiXFx0XCIgPyBsLnNsaWNlKG0pIDogbCkuam9pbihcIlxcblwiKTtcbiAgICB9XG5cbiAgICAvLyBkZWRlbnQgZWF0cyBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlIHRvb1xuICAgIGlmICh0cmltV2hpdGVzcGFjZSkge1xuICAgICAgcmVzdWx0ID0gcmVzdWx0LnRyaW0oKTtcbiAgICB9XG5cbiAgICAvLyBoYW5kbGUgZXNjYXBlZCBuZXdsaW5lcyBhdCB0aGUgZW5kIHRvIGVuc3VyZSB0aGV5IGRvbid0IGdldCBzdHJpcHBlZCB0b29cbiAgICBpZiAoZXNjYXBlU3BlY2lhbENoYXJhY3RlcnMpIHtcbiAgICAgIHJlc3VsdCA9IHJlc3VsdC5yZXBsYWNlKC9cXFxcbi9nLCBcIlxcblwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufVxuXG4vKipcbiAqIEFkanVzdHMgdGhlIGluZGVudGF0aW9uIG9mIGEgbXVsdGktbGluZSBpbnRlcnBvbGF0ZWQgdmFsdWUgdG8gbWF0Y2ggdGhlIGN1cnJlbnQgbGluZS5cbiAqL1xuZnVuY3Rpb24gYWxpZ25WYWx1ZSh2YWx1ZSwgcHJlY2VkaW5nVGV4dCkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcInN0cmluZ1wiIHx8ICF2YWx1ZS5pbmNsdWRlcyhcIlxcblwiKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBjb25zdCBjdXJyZW50TGluZSA9IHByZWNlZGluZ1RleHQuc2xpY2UocHJlY2VkaW5nVGV4dC5sYXN0SW5kZXhPZihcIlxcblwiKSArIDEpO1xuICBjb25zdCBpbmRlbnRNYXRjaCA9IGN1cnJlbnRMaW5lLm1hdGNoKC9eKFxccyspLyk7XG4gIGlmIChpbmRlbnRNYXRjaCkge1xuICAgIGNvbnN0IGluZGVudCA9IGluZGVudE1hdGNoWzFdO1xuICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKC9cXG4vZywgYFxcbiR7aW5kZW50fWApO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZGVmYXVsdDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/dedent/dist/dedent.js\n");

/***/ })

};
;